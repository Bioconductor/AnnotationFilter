% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AnnotationFilter.R
\docType{methods}
\name{AnnotationFilter}
\alias{.GRangesFilter}
\alias{AnnotationFilter}
\alias{AnnotationFilter-class}
\alias{CdsEndFilter}
\alias{CdsEndFilter-class}
\alias{CdsStartFilter}
\alias{CdsStartFilter-class}
\alias{CharacterFilter-class}
\alias{EntrezFilter}
\alias{EntrezFilter-class}
\alias{ExonEndFilter}
\alias{ExonEndFilter-class}
\alias{ExonIdFilter}
\alias{ExonIdFilter-class}
\alias{ExonNameFilter}
\alias{ExonNameFilter-class}
\alias{ExonRankFilter}
\alias{ExonRankFilter-class}
\alias{ExonStartFilter}
\alias{ExonStartFilter-class}
\alias{GRangesFilter}
\alias{GRangesFilter-class}
\alias{GeneBiotypeFilter}
\alias{GeneBiotypeFilter-class}
\alias{GeneEndFilter}
\alias{GeneEndFilter-class}
\alias{GeneIdFilter}
\alias{GeneIdFilter-class}
\alias{GeneStartFilter}
\alias{GeneStartFilter-class}
\alias{GenenameFilter}
\alias{GenenameFilter-class}
\alias{IntegerFilter-class}
\alias{ProteinIdFilter}
\alias{ProteinIdFilter-class}
\alias{SeqNameFilter}
\alias{SeqNameFilter-class}
\alias{SeqStrandFilter}
\alias{SeqStrandFilter-class}
\alias{SymbolFilter}
\alias{SymbolFilter-class}
\alias{TxBiotypeFilter}
\alias{TxBiotypeFilter-class}
\alias{TxEndFilter}
\alias{TxEndFilter-class}
\alias{TxIdFilter}
\alias{TxIdFilter-class}
\alias{TxNameFilter}
\alias{TxNameFilter-class}
\alias{TxStartFilter}
\alias{TxStartFilter-class}
\alias{UniprotFilter}
\alias{UniprotFilter-class}
\alias{condition}
\alias{condition,AnnotationFilter-method}
\alias{feature}
\alias{show,AnnotationFilter-method}
\alias{show,CharacterFilter-method}
\alias{show,GRangesFilter-method}
\alias{show,IntegerFilter-method}
\alias{supportedFilters}
\alias{supportedFilters,missing-method}
\alias{value}
\alias{value,AnnotationFilter-method}
\title{Filters for annotation objects}
\usage{
CdsStartFilter(value, condition = "==")
CdsEndFilter(value, condition = "==")
ExonIdFilter(value, condition = "==")
ExonNameFilter(value, condition = "==")
ExonRankFilter(value, condition = "==")
ExonStartFilter(value, condition = "==")
ExonEndFilter(value, condition = "==")
GeneIdFilter(value, condition = "==")
GenenameFilter(value, condition = "==")
GeneBiotypeFilter(value, condition = "==")
GeneStartFilter(value, condition = "==")
GeneEndFilter(value, condition = "==")
EntrezFilter(value, condition = "==")
SymbolFilter(value, condition = "==")
TxIdFilter(value, condition = "==")
TxNameFilter(value, condition = "==")
TxBiotypeFilter(value, condition = "==")
TxStartFilter(value, condition = "==")
TxEndFilter(value, condition = "==")
ProteinIdFilter(value, condition = "==")
UniprotFilter(value, condition = "==")
SeqNameFilter(value, condition = "==")
SeqStrandFilter(value, condition = "==")

\S4method{condition}{AnnotationFilter}(object)

\S4method{value}{AnnotationFilter}(object)

GRangesFilter(value, feature = "gene", type = c("any", "start", "end",
  "within"))

feature(object)

\S4method{supportedFilters}{missing}(object)
}
\arguments{
\item{object}{An \code{AnnotationFilter} object.}

\item{value}{\code{character()}, \code{integer()}, or
\code{GRanges()} value for the filter}

\item{feature}{\code{character(1)} defining on what feature the
\code{GRangesFilter} should be applied. Choices could be
\code{"gene"}, \code{"tx"} or \code{"exon"}.}

\item{type}{\code{character(1)} indicating how overlaps are to be
filtered. See \code{findOverlaps} in the IRanges package for a
description of this argument.}

\item{condition}{\code{character(1)} defining the condition to be
used in the filter. For \code{IntegerFilter}, one of
\code{"=="}, \code{"!="}, \code{">"}, \code{"<"}, \code{">="}
or \code{"<="}. For \code{CharacterFilter}, one of \code{"=="},
\code{"!="}, \code{"startsWith"} or \code{"endsWith"}. Default
condition is \code{"=="}.}
}
\description{
The filters extending the base \code{AnnotationFilter} class
represent a simple filtering concept for annotation resources.
Each filter object is thought to filter on a single (database)
table column using the provided values and the defined condition.

Filter instances created using the constructor functions (e.g.
\code{GeneIdFilter}).

\code{supportedFilters()} lists all defined filters. Packages using
\code{AnnotationFilter} should implement the \code{supportedFilters} for
their annotation resource object (e.g. for \code{object = "EnsDb"} in the
\code{ensembldb} package) to list all supported filters for the specific
resource.

\code{condition()} get the \code{condition} value for
    the filter \code{object}.

\code{value()} get the \code{value} for the filter
    \code{object}.

\code{feature()} get the \code{feature} for the
    \code{GRangesFilter} \code{object}.
}
\details{
By default filters are only available for tables containing the
field on which the filter acts (i.e. that contain a column with the
name matching the value of the \code{field} slot of the
object). See the vignette for a description to use filters for
databases in which the database table column name differs from the
default \code{field} of the filter.
}
\examples{
## filter by GRanges
GRangesFilter(GenomicRanges::GRanges("chr10:87869000-87876000"))

## Create a SymbolFilter to filter on a gene's symbol.
sf <- SymbolFilter("BCL2")
sf

## Create a GeneStartFilter to filter based on the genes' chromosomal start
## coordinates
gsf <- GeneStartFilter(10000, condition = ">")
gsf

supportedFilters()
}

